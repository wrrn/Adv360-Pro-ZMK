
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
 &kp EQUAL      &kp N1          &kp N2              &kp N3            &kp N4           &kp N5                   &none   &mo 6  &kp N6       &kp N7       &kp N8  &kp N9     &kp N0  &kp MINUS
   &kp TAB       &kp Q           &kp W               &kp E             &kp R            &kp T                   &none   &none   &kp Y        &kp U        &kp I   &kp O      &kp P   &kp BSLH
   &kp ESC  &mt LCMD A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F            &kp G                   &none   &none   &none                             &none  &kp RCTRL      &none   &kp H  &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L  &mt RIGHT_COMMAND SEMICOLON  &kp SQT
     &none       &kp Z           &kp X               &kp C             &kp V            &kp B                   &none   &none   &none        &none        &none   &none      &none      &none   &kp N            &lt 4 M            &kp COMMA          &kp DOT                     &kp FSLH    &none
     &none       &none           &none            &kp LEFT         &kp RIGHT  &lt 1 BACKSPACE            &lt 5 ESCAPE   &none   &none  &lt 3 ENTER  &lt 2 SPACE  &kp UP   &kp DOWN      &none   &none              &none
            >;
        };

        layer_keypad {
            bindings = <
  &none             &none         &none             &none           &none   &none             &none   &none   &none  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &none
  &none             &none         &none             &none           &none   &none             &none   &none   &none   &kp KP_N7     &kp KP_N8      &kp KP_N9        &kp KP_N0   &none
  &none  &kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT   &none             &none  &trans  &trans                                   &trans           &trans   &none   &none  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS   &none
  &none             &none         &none             &none           &none   &none             &none   &none  &trans       &none         &none         &trans            &none   &none   &none  &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_PLUS   &none
  &none             &none         &none             &none           &none  &trans            &trans  &trans  &trans      &trans     &kp KP_N0          &none       &kp KP_DOT   &none   &none      &none
            >;
        };

        layer_Commands {
            bindings = <
 &trans      &trans             &trans           &trans                    &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp ESCAPE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp LC(LS(LG(NUMBER_4)))  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans     &kp TAB     &kp C_PREVIOUS       &kp C_NEXT          &kp C_PLAY_PAUSE  &trans            &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_COMMAND  &trans
 &trans   &kp LG(Z)          &kp LG(X)        &kp LG(C)                 &kp LG(V)  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans             &trans         &trans             &trans  &trans
 &trans      &trans             &trans           &trans                    &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans
            >;
        };

        layer_Amethsyt {
            bindings = <
  &none          &none          &none          &none          &none                 &none            &none   &none   &none              &none   &none   &none          &none   &none
  &none  &kp LS(LA(Q))  &kp LS(LA(W))  &kp LS(LA(E))  &kp LS(LA(R))         &kp LS(LA(T))            &none   &none   &none      &kp LS(LA(I))   &none   &none  &kp LS(LA(P))   &none
  &none  &kp LS(LA(A))  &kp LS(LA(S))  &kp LS(LA(D))  &kp LS(LA(F))         &kp LS(LA(G))            &none   &none   &none                              &none          &none   &none  &kp LS(LA(H))  &kp LS(LA(J))       &kp LS(LA(K))        &kp LS(LA(L))  &kp LS(LA(COMMA))   &none
  &none  &kp LS(LA(Z))  &kp LS(LA(X))          &none          &none         &kp LS(LA(B))            &none   &none   &none              &none   &none   &none          &none   &none  &kp LS(LA(N))          &none  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)    &kp LS(LA(DOT))   &none
  &none          &none          &none          &none          &none  &kp LC(LS(LEFT_ALT))            &none   &none   &none  &kp LS(LA(ENTER))   &none   &none          &none   &none          &none          &none
            >;
        };

        layer_Apps {
            bindings = <
  &none                  &none                  &none                  &none                  &none                  &none            &none   &none   &none   &none   &none   &none   &none   &none
  &none                  &none                  &none  &kp LS(LA(LC(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))            &none   &none   &none   &none   &none   &none   &none   &none
  &none  &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(S))))                  &none  &kp LS(LA(LC(LG(F))))                  &none            &none   &none   &none                   &none   &none   &none   &none  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_COMMAND   &none
  &none  &kp LS(LA(LC(LG(Z))))                  &none  &kp LS(LA(LC(LG(C))))                  &none                  &none            &none   &none   &none   &none   &none   &none   &none   &none   &none            &none              &none          &none              &none   &none
  &none                  &none                  &none                  &none                  &none                  &none            &none   &none   &none   &none   &none   &none   &none   &none   &none            &none
            >;
        };

        layer_Nav_Sym {
            bindings = <
  &none             &none         &none             &none           &none   &none            &none   &none   &none   &none   &none   &none          &none   &none
  &none             &none         &none             &none           &none   &none            &none   &none   &none   &none   &none   &none  &kp BACKSLASH   &none
  &none  &kp LEFT_COMMAND  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT   &none            &none   &none   &none                   &none          &none   &none  &kp LEFT  &kp DOWN     &kp UP         &kp RIGHT   &kp SINGLE_QUOTE   &none
  &none             &none         &none             &none           &none   &none            &none   &none   &none   &none   &none   &none          &none   &none     &none     &none  &kp GRAVE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET   &none
  &none             &none         &none             &none           &none   &none            &none   &none   &none   &none   &none   &none          &none   &none     &none     &none
            >;
        };

        layer_System {
            bindings = <
 &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                            &trans       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans
 &trans        &trans        &trans        &trans        &trans           &trans                       &bootloader  &bootloader        &trans        &trans           &trans        &trans        &trans                  &trans
 &trans        &trans        &trans        &trans        &trans           &trans            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR    &bt BT_CLR                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans           &trans                            &trans       &trans        &trans        &trans           &trans        &trans        &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans    &bl BL_DEC    &bl BL_INC  &rgb_ug RGB_TOG                        &bl BL_TOG       &trans        &trans    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                  &trans  &trans  &trans
            >;
        };

    };
};
